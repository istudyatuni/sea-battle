{"version":3,"sources":["components/App/AppServerAPI.ts","components/App/AppFunctions.ts","components/App/Buttons.tsx","components/Scoreboard/CounterTab.tsx","components/Scoreboard/Scoreboard.tsx","components/Ships/Indicator.tsx","components/Ships/Ship.tsx","components/Ships/Shipsboard.tsx","components/Battlefield/CellFunctions.ts","components/Battlefield/Cell.tsx","components/Battlefield/CellRow.tsx","components/Battlefield/Battlefield.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["SendShips","ships","setID","opID","a","fetch","method","headers","body","JSON","stringify","opponent","response","ok","json","resp","id","togglePopup","console","error","status","SendShot","x","y","sendResp","url","getOpponentID","setOpID","opponentID","removeGetOp","classColor","message","popup","document","getElementById","classList","remove","add","innerHTML","FieldInit","i","ship","j","push","HideOrNot","display","HitOrMiss","changeField","returnResponse","type","getID","yID","style","Buttons","setMode","gameMode","goBattle","setClear","isClear","setOpponentID","ID","copyOpID","useState","newID","setNewID","className","onClick","onSubmit","event","preventDefault","value","placeholder","onChange","target","CounterTab","count","name","Scoreboard","player1","player2","Indicator","path","isKill","src","alt","Ship","kill","changeKill","renderKillLine","KillLine","setLine","line","useEffect","shipName","Shipsboard","kills","setKills","updown","key","toString","renderShips","getCursor","mode","cursor","React","memo","element","setCell","shot","fillBlock","first","clear","settingShips","width","height","setImg","image","row","tmpShip","shotCell","ind","cells","renderCells","Battlefield","field","rows","renderRows","App","countPlayer1","countPlayer2","setField","theme","setTheme","new_value","f","html","wtf","setWTF","navigator","clipboard","writeText","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7884f384.chunk.js","sourcesContent":["import { togglePopup, removeGetOp } from './AppFunctions'\n\nexport const SendShips = async (ships: number[][], setID: (arg0: string)=>void,\n  opID: string) => {\n  const response = await fetch('/ships', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ opponent: opID, ships: ships }),\n  });\n\n  if(response.ok) {\n    let resp = await response.json() as {\n      id: string;\n      opponentID: string;\n    }\n    setID(resp.id)\n    togglePopup(true, \"success\", \"Good game!\")\n  } else {\n    // server unavailable\n    togglePopup(true, \"error\", \"Server unavailable\")\n    console.error('Failed, response status: ', response.status)\n  }\n}\n\nexport const SendShot = async (id: string,\n                                x: number,\n                                y: number,\n                                sendResp: (arg0: any)=>any\n                              ) => {\n  let url = '/shot?id=' + id + '&x=' + x + '&y=' + y\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' }\n  });\n\n  if(response.ok) {\n    let resp = await response.json() as {\n      id: string;\n      type: string;\n    }\n    await sendResp(resp)\n    togglePopup(false)\n  } else {\n    // server unavailable\n    togglePopup(true, \"error\", \"Server unavailable\")\n    console.error('Failed, response status: ', response.status)\n  }\n}\n\nexport const getOpponentID = async (id: string, setOpID: (arg0: string)=>void) => {\n  let url = '/opponentID?id=' + id\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' }\n  });\n\n  if(response.ok) {\n    let resp = await response.json() as {\n      opponentID: string;\n    }\n    setOpID(resp.opponentID)\n\n    // hide button\n    removeGetOp(resp.opponentID)\n    if(resp.opponentID!==\"0\")\n      togglePopup(true, \"success\", \"Successfully get ID\")\n  } else {\n    // server unavailable\n    togglePopup(true, \"error\", \"Server unavailable\")\n    console.error('Failed, response status: ', response.status)\n  }\n}\n","import { SendShot } from './AppServerAPI'\n\nexport const togglePopup = (a: boolean, classColor: string = \"\", message: string = \"\") => {\n  let popup = document.getElementById(\"popup\")\n  if(popup!==null) {\n    popup.classList.remove(\"success\", \"error\")\n    if(a===true) {\n      popup.classList.add(\"show\")\n      popup.classList.add(classColor)\n    }\n    else {\n      popup.classList.remove(\"show\")\n    }\n    popup.innerHTML = message\n  }\n}\n\nexport const FieldInit = (): number[][] => {\n  // return array filled with false value\n  let ships = []\n  for(let i=0; i<10; i++) {\n    let ship = []\n    for(let j=0; j<10; j++) {\n      ship.push(0)\n    }\n    ships.push(ship)\n  }\n  return ships\n}\n\nexport const HideOrNot = (a: number): any => {\n  if(a===1) {\n    return { display: 'none' }\n  }\n}\n\nexport const BoolToOnOff = (a: boolean): string => {\n  if(a===true)\n    return 'Enabled'\n  else\n    return 'Disabled'\n}\n\nexport const HitOrMiss = async (id: string,\n                                 x: number,\n                                 y: number,\n                                 changeField: (arg0: number,\n                                               arg1: number,\n                                               arg2: number\n                                               ) => void\n                                 ) => {\n  let type = \"none\"\n  async function returnResponse(response: any) {\n    type = response.type\n  }\n  await SendShot(id, x, y, returnResponse)\n\n  if (type==='miss')\n    changeField(x, y, 1)\n  else if (type === 'hit')\n    changeField(x, y, 2)\n}\n\nexport const removeGetOp = (opID: string): void => {\n  let getID = document.getElementById('getID')\n  let yID = document.getElementById('yID')\n  if(getID!==null && yID!==null && opID !== \"0\") {\n    getID.style.display = 'none'\n    yID.style.display = 'none'\n  }\n}\n\nexport const delay = (ms: number) => {\n    return new Promise( resolve => setTimeout(resolve, ms) );\n}\n","import React, { useState } from 'react';\n\nimport './App.css'\n\nimport {\n  HideOrNot, BoolToOnOff\n} from './AppFunctions'\n\ntype ButtonsProps = {\n  setMode: (arg0: number) => any,\n  gameMode: number,\n\n  goBattle: () => void,\n\n  setClear: (arg0: boolean) => any,\n  isClear: boolean,\n\n  setOpponentID: (arg0: string) => any,\n  ID: string,\n\n  copyOpID: () => void\n}\n\nconst Buttons: React.FC<ButtonsProps> = ({ setMode, gameMode, goBattle, setClear, isClear, setOpponentID, ID, copyOpID }) => {\n  const [newID, setNewID] = useState(\"\")\n\n  function handleChange(event: any) {\n    let a = event.target.value\n    if(a > 0) {\n      setNewID(a)\n      setOpponentID(a)\n    }\n  }\n\n  function submitID(event: any) {\n    goBattle()\n    event.preventDefault()\n  }\n\n  function handleClickID() {\n    copyOpID()\n  }\n\n  return (\n    <div className=\"Buttons\">\n      <span style={HideOrNot(gameMode)}>\n        You can fix ships if place them wrong</span>\n      <button\n          onClick={()=>setClear(!isClear)}\n          style={HideOrNot(gameMode)}>\n        Fix ships</button>\n      <i style={HideOrNot(gameMode)}>\n        {BoolToOnOff(isClear)}</i>\n\n      <form onSubmit={submitID} style={HideOrNot(gameMode)} >\n        <label>\n          Friend ID: <input\n            type=\"number\"\n            value={newID}\n            placeholder=\"0\"\n            onChange={handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Go battle\"/>\n      </form>\n      <span style={HideOrNot((gameMode+1)%2)}\n         id=\"yID\"\n         onClick={handleClickID}\n      >Your ID: {ID}</span>\n    </div>\n  );\n};\n\nexport default Buttons\n","import React from 'react';\nimport './Scoreboard.css'\n\ntype CounterProps = {\n  count: number,\n  name: string\n}\n\nconst CounterTab: React.FC<CounterProps> = ({ count, name }) => {\n  return (\n    <div className=\"CounterTab\">\n      <p>{count}</p>\n      <p>{name}</p>\n    </div>\n  );\n};\n\nexport default CounterTab;\n","import React from 'react';\nimport './Scoreboard.css'\nimport CounterTab from './CounterTab'\n\ntype ScoreboardProps = {\n  player1: number,\n  player2: number\n}\n\nconst Scoreboard: React.FC<ScoreboardProps> = ({ player1, player2 }) => {\n  return (\n    <div className=\"Scoreboard\">\n      <CounterTab count={player1} name=\"Player 1\" />\n      <CounterTab count={player2} name=\"Player 2\" />\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","import React from 'react';\nimport './Shipboard.css'\n\ntype ShipProps = {\n  isKill: boolean\n}\n\nconst Indicator: React.FC<ShipProps> = ({ isKill }) => {\n  let path\n  if(isKill===true)\n    path = \"Hit\"\n  else path = \"Miss\"\n  path = \"assets/\" + path + \"Small.png\"\n  return (\n    <div className=\"Indicator\">\n      <img src={path} alt=\"\"/>\n    </div>\n  );\n};\n\nexport default Indicator;\n","import React, { useEffect, useState } from 'react';\n\nimport './Shipboard.css'\nimport Indicator from './Indicator'\n\ntype ShipProps = {\n  i: number,\n  name: string,\n  count: number,\n  kill: number,\n  changeKill: (arg0: number, arg1: number)=>void\n}\n\nconst Ship: React.FC<ShipProps> = ({ i, name, count, kill, changeKill }) => {\n  let path = \"assets/\" + name + \"Shape.png\"\n  const [KillLine, setLine] = useState(renderKillLine())\n\n  function renderKillLine(): object[] {\n    // console.log(\"renderKillLine\")\n    let line = []\n    for(let i = 0; i < kill; i++){\n      line.push(<Indicator isKill={true}/>)\n    }\n    for(let i = kill; i < count; i++){\n      line.push(<Indicator isKill={false}/>)\n    }\n    return line\n  }\n\n  useEffect(()=>{\n    setLine(renderKillLine())\n  }, [kill]);\n\n  function addKill() {\n    changeKill(i, 1)\n  }\n\n  return (\n    <div className=\"Ship\">\n      <img src={path} alt={name} />\n      <p>{count}</p>\n      {KillLine}\n      <button onClick={addKill}>+</button>\n      <p>{kill}</p>\n    </div>\n  );\n};\n\nexport default Ship;\n","import React, { /*useEffect,*/ useState } from 'react';\n\nimport Ship from './Ship'\nimport './Shipboard.css'\n\nlet shipName = [\"Aircraft\", \"Battleship\",\n\"Cruiser\", \"Submarine\", \"Carrier\"]\n\nconst Shipsboard: React.FC = () => {\n\n  const [kills, setKills] = useState([0,0,0,0,0])\n\n  function changeKill(i: number, updown: number) {\n    let kill = kills\n    /*if(updown < 0) {\n      kill[i]--\n    } else if(updown > 0) {\n      kill[i]++\n    }*/\n    kill[i]=(kill[i]+1)%(i+2)\n    setKills(kill)\n    // console.log(kills)\n  }\n\n  function renderShips(): object[] {\n    let ships = []\n    for(let i=0; i<5; i++) {\n      ships.push(<Ship\n          key={[i, kills[i]].toString()}\n          i={i}\n          name={shipName[i]}\n          count={i+1}\n          kill={kills[i]}\n          changeKill={changeKill}\n        />)\n      // console.log([i, kills[i]].toString())\n    }\n    return ships\n  }\n\n  /*useEffect(()=>{\n    // console.log(\"useEffect Shipsboard\")\n    renderShips()\n  }, [kills]);\n*/\n  return (\n    <div className=\"Shipsboard\">\n      {renderShips()}\n    </div>\n  );\n};\n\nexport default Shipsboard;\n","export const settingShips = (first: boolean, clear: boolean): string => {\n  let path\n  if(first===false) {\n    if(clear===false) {\n      path = \"Ship\"\n    } else {\n      path = \"Empty\"\n    }\n  } else {\n    path = \"Empty\"\n  }\n  return path\n}\n\nexport const battle = (state: number): string => {\n  let path\n  if(state===1) {\n    path = \"Miss\"\n  } else if(state===2){\n    path = \"Hit\"\n  } else {\n    path = \"Empty\"\n  }\n  return path\n}\n\nexport const getCursor = (mode: number): any => {\n  if(mode===1)\n    return {cursor: \"url('assets/aim50.png') 25 25, auto\"}\n}\n","import React, { useEffect, useState } from 'react';\n\nimport {\n  settingShips, getCursor\n} from './CellFunctions'\n\ntype CellProps = {\n  i: number,\n  isClear: boolean,\n  element: number,\n  gameMode: number,\n  setCell: (arg0: number)=>void,\n  shot: (arg0: number)=>void\n}\n\nconst Cell: React.FC<CellProps> = ({ i, isClear, element, gameMode, setCell, shot }) => {\n  // first == true when first cell's render\n\n  useEffect(()=>{\n    setImg(fillBlock(true))\n  },[element]);\n\n  function fillBlock(first: boolean): object {\n    let path\n    if(gameMode===0){\n      // setting ships\n      if(first===false) {\n        path = settingShips(first, isClear)\n        setCell(i)\n      } else if(isClear===true) {\n        path = \"Empty\"\n        if(element===1)\n          path = \"Ship\"\n      } else {\n        path = \"Empty\"\n      }\n    } else if(gameMode===1) {\n      // when battle\n      if(first===false) {\n        if(element===0) {\n          shot(i)\n          path = \"Empty\"\n        } else {\n          // if tap more one time\n          if(element===1)\n            path = \"Miss\"\n          else if(element===2)\n            path = \"Hit\"\n        }\n      } else {\n        if(element===0) {\n          // before battle need clear field\n          path = \"Empty\"\n        } else if(element===1) {\n          path = \"Miss\"\n        } else {\n          path = \"Hit\"\n        }\n      }\n    }\n    path = \"assets/\" + path + \".png\"\n    return <img src={path} alt=\"\" width=\"100%\" height=\"100%\"/>\n  }\n\n  const [image, setImg] = useState(fillBlock(true))\n  return (\n    <div className=\"Cell\"\n         onClick={()=>setImg(fillBlock(false))}\n         style={getCursor(gameMode)}>\n      {image}\n    </div>\n  );\n};\n\nexport default React.memo(Cell);\n","import React, { useState } from 'react';\nimport Cell from './Cell'\n\ntype CellRowProps = {\n  i: number,\n  isClear: boolean,\n  gameMode: number,\n  row: number[],\n  shot: (arg0: number, arg1: number)=>any\n}\n\nconst CellRow: React.FC<CellRowProps> = ({ i, isClear, gameMode, row, shot }) => {\n  let tmpShip = useState(row)\n  row = tmpShip[0]\n\n  function shotCell(j: number) {\n    (async ()=>{\n      await shot(i, j)\n    })()\n  }\n\n  function setCell(ind: number) {\n    if(isClear===false)\n      row[ind] = 1\n    else\n      row[ind] = 0\n  }\n\n  function renderCells(): object[] {\n    let cells = []\n    for(let ind=0; ind<10; ind++) {\n      cells.push(<Cell\n        i={ind}\n        isClear={isClear}\n        gameMode={gameMode}\n        setCell={setCell}\n        shot={shotCell}\n        element={row[ind]}\n      />)\n    }\n    return cells\n  }\n\n  let cells = renderCells()\n  return (\n    <>\n      <div className=\"CellRow\">\n        {cells}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(CellRow);\n","import React from 'react';\n\nimport CellRow from './CellRow'\nimport './Battlefield.css'\n\ntype BattlefieldProps = {\n  isClear: boolean,\n  gameMode: number,\n  field: number[][],\n  shot: (arg0: number, arg1: number)=>any\n}\n\nconst Battlefield: React.FC<BattlefieldProps> = ({ isClear, gameMode, field, shot }) => {\n  // 0 - empty, 1 - miss, 2 - hit (in j)\n  // gameMode: 0 - placing ships, 1 -battle\n\n  function renderRows(): object[] {\n    let rows = []\n    for(let ind=0; ind<10; ind++) {\n      rows.push(<CellRow\n        i={ind}\n        isClear={isClear}\n        gameMode={gameMode}\n        row={field[ind]}\n        shot={shot}\n      />)\n    }\n    return rows\n  }\n\n  let rows = renderRows()\n  return (\n    <div className=\"Battlefield\">\n      {rows}\n    </div>\n  );\n};\n\nexport default Battlefield;\n","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\nimport Buttons from'./Buttons'\nimport Scoreboard from '../Scoreboard/Scoreboard'\nimport Shipsboard from '../Ships/Shipsboard'\nimport Battlefield from '../Battlefield/Battlefield'\n\nimport {\n  FieldInit, HideOrNot,\n  BoolToOnOff, HitOrMiss\n} from './AppFunctions'\n\nimport { SendShips, getOpponentID } from './AppServerAPI'\n\nconst App: React.FC = () => {\n  const [countPlayer1, setCount1] = useState(0)\n  const [countPlayer2, setCount2] = useState(0)\n\n  const [gameMode, setMode] = useState(0)\n  const [field, setField] = useState<number[][]>(FieldInit())\n  const [isClear, setClear] = useState(false)\n\n  const [opponentID, setOpponentID] = useState(\"0\")\n  const [ID, setID] = useState(\"0\")\n\n  const [theme, setTheme] = useState('light')\n\n  function toggleTheme() {\n    if(theme==='light')\n      setTheme('dark')\n    else if(theme==='dark')\n      setTheme('light')\n  }\n\n  useEffect(()=>{\n    let html = document.getElementById('html')\n    if(html!==null) {\n      if(theme==='light')\n        html.classList.remove('dark-mode')\n      else if(theme==='dark')\n        html.classList.add('dark-mode')\n    }\n  }, [theme]);\n\n  function changeField(x: number, y: number, new_value: number) {\n    let f = field\n    f[x][y] = new_value\n    setField(f)\n  }\n\n  const goBattle = async () => {\n    await SendShips(field, setID, opponentID)\n\n    setField(FieldInit())\n    setMode(1)\n    setClear(false)\n  }\n\n  /*\n    WTF? if call in 'shot' just one async function with await,\n    re-render child components not work (empty not change to\n    \"hit\" / \"miss\"), but if use some changes for some state (like\n    i below), then all work. How, just.. HOW??\n  */\n  const [wtf, setWTF] = useState(0)\n  const shot = async (x: number, y: number) => {\n    await HitOrMiss(opponentID, x, y, changeField)\n    setWTF(wtf+1)\n  }\n\n  function copyOpponentID() {\n    navigator.clipboard.writeText(ID)\n  }\n\n  // ¯\\_(ツ)_/¯\n  return (\n    <div className=\"App\">\n      <div className=\"theme-toggle\" onClick={toggleTheme}>🌓</div>\n      <div className=\"inline-board\">\n        <Scoreboard player1={countPlayer1} player2={countPlayer2}/>\n        <Shipsboard/>\n        <Buttons\n          gameMode={gameMode}\n          setMode={setMode}\n          goBattle={goBattle}\n          isClear={isClear}\n          setClear={setClear}\n          setOpponentID={setOpponentID}\n          ID={ID}\n          copyOpID={copyOpponentID}\n        />\n        <button onClick={()=>{getOpponentID(ID, setOpponentID)}}\n                style={HideOrNot((gameMode+1)%2)}\n                id=\"getID\"\n        >Get opponent ID</button>\n      </div>\n\n      <div className=\"inline-field\">\n        <Battlefield\n          key={gameMode.toString()}\n          isClear={isClear}\n          gameMode={gameMode}\n          field={field}\n          shot={shot}\n        />\n      </div>\n\n      <div className=\"popup\">\n        <span className=\"popup-box\" id=\"popup\"></span>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}