{"version":3,"sources":["components/Counter/CounterTab.tsx","components/Counter/Scoreboard.tsx","components/Ships/Indicator.tsx","components/Ships/Ship.tsx","components/Ships/Shipsboard.tsx","components/Battlefield/Cell.tsx","components/Battlefield/CellRow.tsx","components/Battlefield/Battlefield.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["CounterTab","count","name","className","Scoreboard","player1","player2","Indicator","path","isKill","src","alt","Ship","i","kill","changeKill","KillLine","renderKillLine","console","log","line","push","useEffect","onClick","shipName","Shipsboard","useState","kills","setKills","updown","renderShips","ships","key","toString","React","memo","gameMode","state","isShip","setShip","fillBlock","first","settingShips","battle","width","height","image","setImg","j","ship","tmpShip","ind","cells","renderCells","Battlefield","rows","renderRows","ShipsInit","App","allShips","setAllShips","setMode","getShips","setShips","setI","setJ","countPlayer1","setCount1","mode","showShips","a","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0cd8326.chunk.js","sourcesContent":["import React from 'react';\nimport './Scoreboard.css'\n\ntype CounterProps = {\n  count: number,\n  name: string\n}\n\nconst CounterTab: React.FC<CounterProps> = ({ count, name }) => {\n  return (\n    <div className=\"CounterTab\">\n      <p>{count}</p>\n      <p>{name}</p>\n    </div>\n  );\n};\n\nexport default CounterTab;\n","import React from 'react';\nimport './Scoreboard.css'\nimport CounterTab from './CounterTab'\n\ntype ScoreboardProps = {\n  player1: number,\n  player2: number\n}\n\nconst Scoreboard: React.FC<ScoreboardProps> = ({ player1, player2 }) => {\n  return (\n    <div className=\"Scoreboard\">\n      <CounterTab count={player1} name=\"player 1\" />\n      <CounterTab count={player2} name=\"player 2\" />\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","import React from 'react';\nimport './Shipboard.css'\n\ntype ShipProps = {\n  isKill: boolean\n}\n\nconst Indicator: React.FC<ShipProps> = ({ isKill }) => {\n  let path\n  if(isKill===true)\n    path = \"Hit\"\n  else path = \"Miss\"\n  path = \"assets/\" + path + \" small.png\"\n  return (\n    <div className=\"Indicator\">\n      <img src={path} alt=\"\"/>\n    </div>\n  );\n};\n\nexport default Indicator;\n","import React, { useEffect } from 'react';\nimport './Shipboard.css'\nimport Indicator from './Indicator'\n\ntype ShipProps = {\n  i: number,\n  name: string,\n  count: number,\n  kill: number,\n  changeKill: (arg0: number, arg1: number)=>void\n}\n\nconst Ship: React.FC<ShipProps> = ({ i, name, count, kill, changeKill }) => {\n  let path = \"assets/\" + name + \"Shape.png\"\n  let KillLine: object[] = []\n\n  function renderKillLine(): object[] {\n    console.log(\"renderKillLine\")\n    let line = []\n    for(let i = 0; i < kill; i++){\n      line.push(<Indicator isKill={true}/>)\n    }\n    for(let i = kill; i < count; i++){\n      line.push(<Indicator isKill={false}/>)\n    }\n    return line\n  }\n\n  useEffect(()=>{\n    KillLine = renderKillLine()\n  }, [kill]);\n\n  function addKill() {\n    changeKill(i, 1)\n  }\n\n  KillLine = renderKillLine()\n\n  return (\n    <div className=\"Ship\">\n      <img src={path} alt={name} />\n      <p>{count}</p>\n      {KillLine}\n      <button onClick={addKill}>+</button>\n      <p>{kill}</p>\n    </div>\n  );\n};\n\nexport default Ship;\n","import React, { useEffect, useState } from 'react';\nimport Ship from './Ship'\nimport './Shipboard.css'\n\nlet shipName = [\"Aircraft\", \"Battleship\",\n\"Cruiser\", \"Submarine\", \"Carrier\"]\n\nconst Shipsboard: React.FC = () => {\n\n  const [kills, setKills] = useState([0,0,0,0,0])\n\n  function changeKill(i: number, updown: number) {\n    let kill = kills\n    /*if(updown < 0) {\n      kill[i]--\n    } else if(updown > 0) {\n      kill[i]++\n    }*/\n    kill[i]=(kill[i]+1)%(i+2)\n    setKills(kill)\n    // console.log(kills)\n  }\n\n  function renderShips(): object[] {\n    let ships = []\n    for(let i=0; i<5; i++) {\n      ships.push(<Ship\n          key={[i, kills[i]].toString()}\n          i={i}\n          name={shipName[i]}\n          count={i+1}\n          kill={kills[i]}\n          changeKill={changeKill}\n        />)\n      console.log([i, kills[i]].toString())\n    }\n    return ships\n  }\n\n  useEffect(()=>{\n    console.log(\"useEffect Shipsboard\")\n    renderShips()\n  }, [kills]);\n\n  return (\n    <div className=\"Shipsboard\">\n      {renderShips()}\n    </div>\n  );\n};\n\nexport default Shipsboard;\n","import React, { useState } from 'react';\n\n\ntype CellProps = {\n  i: number,\n  state: number,\n  gameMode: number,\n  isShip: boolean,\n  setShip: (arg0: number)=>void\n}\n\nfunction settingShips(first: boolean, isShip: boolean): string {\n  let path\n  if(isShip===false) {\n    path = \"Ship\"\n    console.log(\"set ship\")\n  } else if(first===false) {\n    path = \"Ship\"\n  } else {\n    path = \"Empty\"\n  }\n  // console.log(path)\n  return path\n}\n\nfunction battle(state: number): string {\n  let path\n  if(state===1) {\n    path = \"Miss\"\n  } else if(state===2){\n    path = \"Hit\"\n  } else {\n    path = \"Empty\"\n  }\n  // console.log(path)\n  return path\n}\n\nconst Cell: React.FC<CellProps> = ({ i, state, gameMode, isShip, setShip }) => {\n  // first == true when first cell's render\n\n  function fillBlock(first: boolean): object {\n    let path\n    if(gameMode===0){\n      if(first===false) {\n        path = settingShips(first, isShip)\n        setShip(i)\n      } else if(isShip===true){\n        // path = \"Ship\"\n      } else {\n        path = \"Empty\"\n      }\n    } else if(gameMode===1) {\n      if(first===false) {\n        path = battle(1)\n      } else {\n        // before battle need clear field\n        path = \"Empty\"\n      }\n    }\n    if(isShip===true)\n      path = \"Ship\"\n    path = \"assets/\" + path + \".png\"\n    return <img src={path} alt=\"\" width=\"100%\" height=\"100%\"/>\n  }\n\n  const [image, setImg] = useState(fillBlock(true))\n  return (\n    <div className=\"Cell\" onClick={()=>setImg(fillBlock(false))}>\n      {image}\n    </div>\n  );\n};\n\nexport default React.memo(Cell);\n","import React, { useState } from 'react';\nimport Cell from './Cell'\n\ntype CellRowProps = {\n  i: number,\n  j: number[],\n  gameMode: number,\n  ship: boolean[]\n}\n\nconst CellRow: React.FC<CellRowProps> = ({ i, j, gameMode, ship }) => {\n  let tmpShip = useState(ship)\n  ship = tmpShip[0]\n\n  function setShip(ind: number) {\n    ship[ind] = true\n  }\n\n  function renderCells(): object[] {\n    let cells = []\n    for(let ind=0; ind<10; ind++) {\n      cells.push(<Cell\n        i={ind}\n        state={j[ind]}\n        gameMode={gameMode}\n        isShip={ship[ind]}\n        setShip={setShip}\n      />)\n    }\n    return cells\n  }\n\n  let cells = renderCells()\n  return (\n    <>\n      <div className=\"CellRow\">\n        {cells}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(CellRow);\n","import React from 'react';\nimport CellRow from './CellRow'\nimport './Battlefield.css'\n\ntype BattlefieldProps = {\n  gameMode: number,\n  ships: boolean[][]\n}\n\nconst Battlefield: React.FC<BattlefieldProps> = ({ gameMode, ships }) => {\n  // 0 - empty, 1 - miss, 2 - hit (in j)\n  // gameMode: 0 - placing ships, 1 -battle\n\n  function renderRows(): object[] {\n    let rows = []\n    for(let ind=0; ind<10; ind++) {\n      rows.push(<CellRow\n        i={ind}\n        j={[0,0,0,0,0,0,0,0,0,0]}\n        gameMode={gameMode}\n        ship={ships[ind]}\n      />)\n    }\n    return rows\n  }\n\n  let rows = renderRows()\n  return (\n    <div className=\"Battlefield\">\n      {rows}\n    </div>\n  );\n};\n\nexport default Battlefield;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Scoreboard from '../Counter/Scoreboard'\nimport Shipsboard from '../Ships/Shipsboard'\nimport Battlefield from '../Battlefield/Battlefield'\n\nfunction ShipsInit(): boolean[][] {\n  // return array filled with false value\n  let ships = []\n  for(let i=0; i<10; i++) {\n    let ship = []\n    for(let j=0; j<10; j++) {\n      ship.push(false)\n    }\n    ships.push(ship)\n  }\n  return ships\n}\n\nconst App: React.FC = () => {\n  const [allShips, setAllShips] = useState<boolean[][]>(ShipsInit())\n  const [gameMode, setMode] = useState(0)\n  const [ships, setShips] = useState<boolean[][]>(getShips(0))\n  const [i, setI] = useState(0)\n  const [j, setJ] = useState(0)\n  const [countPlayer1, setCount1] = useState(0)\n\n  function getShips(mode: number): boolean[][] {\n    // wtf? when gameMode==0, it return ship\n    // as empty array (filled with false)\n    // but, maybe it happend not in this func\n\n    // i add param mode, and it work good\n    if(mode===0)\n      return allShips\n    else\n      return ShipsInit()\n  }\n\n  function showShips() {\n    for(let i=0; i<10; i++) {\n      for(let j=0; j<10; j++) {\n        if(ships[i][j]===true)\n          console.log(\"ship: \", i, j)\n      }\n    }\n    console.log('--')\n    // setShips(getShips())\n  }\n\n  function setGameMode(a: number) {\n    setShips(getShips((gameMode+1)%2))\n    setMode(a)\n    showShips()\n  }\n\n  function addShip() {\n    let ships = allShips\n    ships[i][j] = true\n    setAllShips(ships)\n    setShips(getShips((gameMode+1)%2))\n    setI((i+1)%10)\n    setJ((j+1)%10)\n    setCount1(countPlayer1+1)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"inline-board\">\n        <Scoreboard player1={countPlayer1} player2={3}/>\n        <Shipsboard/>\n        <button onClick={()=>setGameMode((gameMode+1)%2)}>Change mode, now {gameMode}</button>\n        <button onClick={addShip}>Add ship</button>\n        <br/>\n        <button onClick={showShips}>Show ships</button>\n        <button onClick={()=>setAllShips(ShipsInit())}>Clear</button>\n        <p>for apply clear and add ship, you need to click on \"change mode\" twice</p>\n        <p>¯\\_(ツ)_/¯</p>\n      </div>\n      <div className=\"inline-field\">\n        <Battlefield key={gameMode.toString()} gameMode={gameMode} ships={ships}/>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}