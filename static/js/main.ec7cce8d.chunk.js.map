{"version":3,"sources":["components/Counter/CounterTab.tsx","components/Counter/Scoreboard.tsx","components/Ships/Indicator.tsx","components/Ships/Ship.tsx","components/Ships/Shipsboard.tsx","components/Battlefield/Cell.tsx","components/Battlefield/CellRow.tsx","components/Battlefield/Battlefield.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["CounterTab","count","name","className","Scoreboard","player1","player2","Indicator","path","isKill","src","alt","Ship","kill","KillsLine","i","push","Shipsboard","React","memo","state","stateGame","isShip","useState","ship","setShip","block","first","console","log","width","height","image","setImg","onClick","j","Battlefield","ships","App","ShipsInit","allShips","gameMode","setMode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec7cce8d.chunk.js","sourcesContent":["import React from 'react';\nimport './Scoreboard.css'\n\ntype CounterProps = {\n  count: number,\n  name: string\n}\n\nconst CounterTab: React.FC<CounterProps> = ({ count, name }) => {\n  return (\n    <div className=\"CounterTab\">\n      <p>{count}</p>\n      <p>{name}</p>\n    </div>\n  );\n};\n\nexport default CounterTab;\n","import React from 'react';\nimport './Scoreboard.css'\nimport CounterTab from './CounterTab'\n\ntype ScoreboardProps = {\n  player1: number,\n  player2: number\n}\n\nconst Scoreboard: React.FC<ScoreboardProps> = ({ player1, player2 }) => {\n  return (\n    <div className=\"Scoreboard\">\n      <CounterTab count={player1} name=\"player 1\" />\n      <CounterTab count={player2} name=\"player 2\" />\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","import React from 'react';\nimport './Shipboard.css'\n\ntype ShipProps = {\n  isKill: boolean\n}\n\nconst Indicator: React.FC<ShipProps> = ({ isKill }) => {\n  let path\n  if(isKill===true)\n    path = \"Hit\"\n  else path = \"Miss\"\n  path = \"assets/\" + path + \" small.png\"\n  return (\n    <div className=\"Indicator\">\n      <img src={path} alt=\"\"/>\n    </div>\n  );\n};\n\nexport default Indicator;\n","import React from 'react';\nimport './Shipboard.css'\nimport Indicator from './Indicator'\n\ntype ShipProps = {\n  name: string,\n  count: number,\n  kill: number\n}\n\nconst Ship: React.FC<ShipProps> = ({ name, count, kill }) => {\n  let path = \"assets/\" + name + \"Shape.png\"\n  let KillsLine = []\n  if(kill > count || kill < 0)\n    // better not change props\n    kill=0\n  for(let i = 0; i < kill; i++){\n    KillsLine.push(<Indicator isKill={true}/>)\n  }\n  for(let i = kill; i < count; i++){\n    KillsLine.push(<Indicator isKill={false}/>)\n  }\n  return (\n    <div className=\"Ship\">\n      <img src={path} alt={name} />\n      <p>{count}</p>\n      {KillsLine}\n    </div>\n  );\n};\n\nexport default Ship;\n","import React from 'react';\nimport Ship from './Ship'\nimport './Shipboard.css'\n\nconst Shipsboard: React.FC = () => {\n  return (\n    <div className=\"Shipsboard\">\n      <Ship name=\"Aircraft\"   count={1} kill={0} />\n      <Ship name=\"Battleship\" count={2} kill={1} />\n      <Ship name=\"Cruiser\"    count={3} kill={0} />\n      <Ship name=\"Submarine\"  count={4} kill={1} />\n      <Ship name=\"Carrier\"    count={5} kill={3} />\n    </div>\n  );\n};\n\nexport default Shipsboard;\n","import React, { useState } from 'react';\n\n\ntype CellProps = {\n  state: number,\n  stateGame: number,\n  isShip: boolean\n}\n\nconst Cell: React.FC<CellProps> = ({ state, stateGame, isShip }) => {\n\n  const [ship, setShip] = useState(isShip)\n  function block(first: boolean, state: number): any {\n    console.log(first, state, stateGame, isShip)\n    let path\n    if(first===false && stateGame===0 || isShip===true){\n      path = \"Ship\"\n      setShip(true)\n    } else if(state===1) {\n      path = \"Miss\"\n    } else if(state===2){\n      path = \"Hit\"\n    } else {\n      path = \"Empty\"\n    }\n    path = \"assets/\" + path + \".png\"\n    return <img src={path} alt=\"\" width=\"100%\" height=\"100%\"/>\n  }\n\n  const [image, setImg] = useState(block(true, state))\n  isShip = ship\n  return (\n    <>\n      <div className=\"Cell\" onClick={()=>setImg(block(false, state+1))}>\n        {image}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(Cell);\n","import React, { useState } from 'react';\nimport Cell from './Cell'\n\ntype CellRowProps = {\n  i: number,\n  j: number[],\n  stateGame: number,\n  ship: boolean[]\n}\n\nconst CellRow: React.FC<CellRowProps> = ({ i, j, stateGame, ship }) => {\n  let tmpShip = useState(ship)\n  ship = tmpShip[0]\n  return (\n    <>\n      <div className=\"CellRow\">\n        <Cell state={j[0]} stateGame={stateGame} isShip={ship[0]} />\n        <Cell state={j[1]} stateGame={stateGame} isShip={ship[1]} />\n        <Cell state={j[2]} stateGame={stateGame} isShip={ship[2]} />\n        <Cell state={j[3]} stateGame={stateGame} isShip={ship[3]} />\n        <Cell state={j[4]} stateGame={stateGame} isShip={ship[4]} />\n        <Cell state={j[5]} stateGame={stateGame} isShip={ship[5]} />\n        <Cell state={j[6]} stateGame={stateGame} isShip={ship[6]} />\n        <Cell state={j[7]} stateGame={stateGame} isShip={ship[7]} />\n        <Cell state={j[8]} stateGame={stateGame} isShip={ship[8]} />\n        <Cell state={j[9]} stateGame={stateGame} isShip={ship[9]} />\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(CellRow);\n","import React from 'react';\nimport CellRow from './CellRow'\nimport './Battlefield.css'\n\ntype BattlefieldProps = {\n  stateGame: number,\n  ships: boolean[][]\n}\n\nconst Battlefield: React.FC<BattlefieldProps> = ({ stateGame, ships }) => {\n  // 0 - empty, 1 - miss, 2 - hit (in j)\n  // stateGame: 0 - placing ships\n  return (\n    <div className=\"Battlefield\">\n      <CellRow i={0} j={[1,0,0,0,0,0,0,0,0,0]} stateGame={stateGame} ship={ships[0]} />\n      <CellRow i={1} j={[0,1,1,1,0,0,0,0,0,0]} stateGame={stateGame} ship={ships[1]} />\n      <CellRow i={2} j={[0,0,0,0,0,0,1,0,0,0]} stateGame={stateGame} ship={ships[2]} />\n      <CellRow i={3} j={[0,0,0,1,0,0,0,0,0,0]} stateGame={stateGame} ship={ships[3]} />\n      <CellRow i={4} j={[0,0,1,0,0,0,0,1,0,0]} stateGame={stateGame} ship={ships[4]} />\n      <CellRow i={5} j={[0,0,0,0,0,0,0,0,0,0]} stateGame={stateGame} ship={ships[5]} />\n      <CellRow i={6} j={[0,0,0,0,0,0,0,1,0,0]} stateGame={stateGame} ship={ships[6]} />\n      <CellRow i={7} j={[0,0,0,0,0,0,0,0,0,0]} stateGame={stateGame} ship={ships[7]} />\n      <CellRow i={8} j={[0,0,0,0,0,0,0,0,0,0]} stateGame={stateGame} ship={ships[8]} />\n      <CellRow i={9} j={[0,0,0,0,0,0,0,0,0,0]} stateGame={stateGame} ship={ships[9]} />\n    </div>\n  );\n};\n\nexport default Battlefield;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Scoreboard from '../Counter/Scoreboard'\nimport Shipsboard from '../Ships/Shipsboard'\nimport Battlefield from '../Battlefield/Battlefield'\n\nfunction ShipsInit(): boolean[][] {\n  let ships = []\n  for(let i=0; i<100; i++) {\n    let ship = []\n    for(let j=0; j<10; j++) {\n      ship.push(false)\n    }\n    ships.push(ship)\n  }\n  return ships\n}\n/*\nfunction setShip(i: number, j: number, all: boolean[][]): boolean[][] {\n  let ships = all\n  ships[i][j] = true\n  return ships\n}\n*/\nconst App: React.FC = () => {\n  const [allShips, setShips] = useState<boolean[][]>(ShipsInit())\n  const [gameMode, setMode] = useState(0)\n/*\n  function showShips() {\n    for(let i=0; i<100; i++) {\n      for(let j=0; j<10; j++) {\n        if(allShips[i][j]===true)\n          console.log(\"ship: \", i, j)\n      }\n    }\n    console.log(allShips[0][0])\n    setShips(setShip(5,5,allShips))\n  }*/\n  return (\n    <div className=\"App\">\n      <div className=\"inline-board\">\n        <Scoreboard player1={2} player2={3}/>\n        <Shipsboard/>\n        <button onClick={()=>setMode((gameMode+1)%2)}>Change mode</button>\n      </div>\n      <div className=\"inline-field\">\n        <Battlefield stateGame={gameMode} ships={allShips}/>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}