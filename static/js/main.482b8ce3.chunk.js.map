{"version":3,"sources":["components/Scoreboard/CounterTab.tsx","components/Scoreboard/Scoreboard.tsx","components/Ships/Indicator.tsx","components/Ships/Ship.tsx","components/Ships/Shipsboard.tsx","components/Battlefield/Cell.tsx","components/Battlefield/CellFunctions.ts","components/Battlefield/CellRow.tsx","components/Battlefield/Battlefield.tsx","components/App/AppServerAPI.ts","components/App/AppFunctions.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["CounterTab","count","name","className","Scoreboard","player1","player2","Indicator","path","isKill","src","alt","Ship","i","kill","changeKill","useState","renderKillLine","KillLine","setLine","line","push","useEffect","onClick","shipName","Shipsboard","kills","setKills","updown","ships","key","toString","renderShips","React","memo","isClear","element","gameMode","setCell","shot","fillBlock","first","console","log","clear","settingShips","width","height","setImg","image","row","tmpShip","shotCell","j","a","ind","cells","renderCells","Battlefield","field","rows","renderRows","SendShips","setID","fetch","method","headers","body","JSON","stringify","response","status","ok","json","resp","id","SendShot","x","y","sendResp","url","FieldInit","ship","HideOrNot","display","HitOrMiss","changeField","returnResponse","type","App","countPlayer1","setCount1","countPlayer2","setMode","setField","setClear","ID","setI","setJ","new_value","f","goBattle","sendShips","addShip","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.482b8ce3.chunk.js","sourcesContent":["import React from 'react';\nimport './Scoreboard.css'\n\ntype CounterProps = {\n  count: number,\n  name: string\n}\n\nconst CounterTab: React.FC<CounterProps> = ({ count, name }) => {\n  return (\n    <div className=\"CounterTab\">\n      <p>{count}</p>\n      <p>{name}</p>\n    </div>\n  );\n};\n\nexport default CounterTab;\n","import React from 'react';\nimport './Scoreboard.css'\nimport CounterTab from './CounterTab'\n\ntype ScoreboardProps = {\n  player1: number,\n  player2: number\n}\n\nconst Scoreboard: React.FC<ScoreboardProps> = ({ player1, player2 }) => {\n  return (\n    <div className=\"Scoreboard\">\n      <CounterTab count={player1} name=\"Player 1\" />\n      <CounterTab count={player2} name=\"Player 2\" />\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","import React from 'react';\nimport './Shipboard.css'\n\ntype ShipProps = {\n  isKill: boolean\n}\n\nconst Indicator: React.FC<ShipProps> = ({ isKill }) => {\n  let path\n  if(isKill===true)\n    path = \"Hit\"\n  else path = \"Miss\"\n  path = \"assets/\" + path + \"Small.png\"\n  return (\n    <div className=\"Indicator\">\n      <img src={path} alt=\"\"/>\n    </div>\n  );\n};\n\nexport default Indicator;\n","import React, { useEffect, useState } from 'react';\n\nimport './Shipboard.css'\nimport Indicator from './Indicator'\n\ntype ShipProps = {\n  i: number,\n  name: string,\n  count: number,\n  kill: number,\n  changeKill: (arg0: number, arg1: number)=>void\n}\n\nconst Ship: React.FC<ShipProps> = ({ i, name, count, kill, changeKill }) => {\n  let path = \"assets/\" + name + \"Shape.png\"\n  const [KillLine, setLine] = useState(renderKillLine())\n\n  function renderKillLine(): object[] {\n    // console.log(\"renderKillLine\")\n    let line = []\n    for(let i = 0; i < kill; i++){\n      line.push(<Indicator isKill={true}/>)\n    }\n    for(let i = kill; i < count; i++){\n      line.push(<Indicator isKill={false}/>)\n    }\n    return line\n  }\n\n  useEffect(()=>{\n    setLine(renderKillLine())\n  }, [kill]);\n\n  function addKill() {\n    changeKill(i, 1)\n  }\n\n  return (\n    <div className=\"Ship\">\n      <img src={path} alt={name} />\n      <p>{count}</p>\n      {KillLine}\n      <button onClick={addKill}>+</button>\n      <p>{kill}</p>\n    </div>\n  );\n};\n\nexport default Ship;\n","import React, { /*useEffect,*/ useState } from 'react';\n\nimport Ship from './Ship'\nimport './Shipboard.css'\n\nlet shipName = [\"Aircraft\", \"Battleship\",\n\"Cruiser\", \"Submarine\", \"Carrier\"]\n\nconst Shipsboard: React.FC = () => {\n\n  const [kills, setKills] = useState([0,0,0,0,0])\n\n  function changeKill(i: number, updown: number) {\n    let kill = kills\n    /*if(updown < 0) {\n      kill[i]--\n    } else if(updown > 0) {\n      kill[i]++\n    }*/\n    kill[i]=(kill[i]+1)%(i+2)\n    setKills(kill)\n    // console.log(kills)\n  }\n\n  function renderShips(): object[] {\n    let ships = []\n    for(let i=0; i<5; i++) {\n      ships.push(<Ship\n          key={[i, kills[i]].toString()}\n          i={i}\n          name={shipName[i]}\n          count={i+1}\n          kill={kills[i]}\n          changeKill={changeKill}\n        />)\n      // console.log([i, kills[i]].toString())\n    }\n    return ships\n  }\n\n  /*useEffect(()=>{\n    // console.log(\"useEffect Shipsboard\")\n    renderShips()\n  }, [kills]);\n*/\n  return (\n    <div className=\"Shipsboard\">\n      {renderShips()}\n    </div>\n  );\n};\n\nexport default Shipsboard;\n","import React, { useEffect, useState } from 'react';\n\nimport {\n  settingShips\n} from './CellFunctions'\n\ntype CellProps = {\n  i: number,\n  isClear: boolean,\n  element: number,\n  gameMode: number,\n  setCell: (arg0: number)=>void,\n  shot: (arg0: number)=>void\n}\n\nconst Cell: React.FC<CellProps> = ({ i, isClear, element, gameMode, setCell, shot }) => {\n  // first == true when first cell's render\n\n  useEffect(()=>{\n    console.log('useEffect')\n    setImg(fillBlock(true))\n  },[element]);\n\n  function fillBlock(first: boolean): object {\n    let path\n    console.log('el : ', element)\n    if(gameMode===0){\n      // setting ships\n      if(first===false) {\n        path = settingShips(first, isClear)\n        setCell(i)\n      } else {\n        path = \"Empty\"\n      }\n    } else if(gameMode===1) {\n      // when battle\n      if(first===false) {\n        // when player tap to cell\n        /*(async ()=>{\n          await shot(i)\n        })()*/\n        shot(i)\n        // path = \"Hit\"\n        if(element===0) {\n          // before battle need clear field\n          path = \"Miss\"\n        } else if(element===1) {\n          path = \"Hit\"\n        } else {\n          path = \"Empty\"\n        }\n        console.log('f 0: ', path)\n      } else {\n        if(element===0) {\n          // before battle need clear field\n          path = \"Empty\"\n        } else if(element===1) {\n          path = \"Miss\"\n        } else {\n          path = \"Hit\"\n        }\n        console.log('f 1: ', path)\n      }\n    }\n    path = \"assets/\" + path + \".png\"\n    return <img src={path} alt=\"\" width=\"100%\" height=\"100%\"/>\n  }\n\n  const [image, setImg] = useState(fillBlock(true))\n  return (\n    <div className=\"Cell\" onClick={()=>setImg(fillBlock(false))}>\n      {image}\n    </div>\n  );\n};\n\nexport default React.memo(Cell);\n","export const settingShips = (first: boolean, clear: boolean): string => {\n  let path\n  if(first===false) {\n    if(clear===false) {\n      path = \"Ship\"\n    } else {\n      path = \"Empty\"\n    }\n  } else {\n    path = \"Empty\"\n  }\n  return path\n}\n\nexport const battle = (state: number): string => {\n  let path\n  if(state===1) {\n    path = \"Miss\"\n  } else if(state===2){\n    path = \"Hit\"\n  } else {\n    path = \"Empty\"\n  }\n  return path\n}\n","import React, { useState } from 'react';\nimport Cell from './Cell'\n\ntype CellRowProps = {\n  i: number,\n  isClear: boolean,\n  gameMode: number,\n  row: number[],\n  shot: (arg0: number, arg1: number)=>any\n}\n\nconst CellRow: React.FC<CellRowProps> = ({ i, isClear, gameMode, row, shot }) => {\n  let tmpShip = useState(row)\n  row = tmpShip[0]\n\n  function shotCell(j: number) {\n    (async ()=>{\n      await shot(i, j)\n    })()\n  }\n\n  function setCell(ind: number) {\n    if(isClear===false)\n      row[ind] = 1\n    else\n      row[ind] = 0\n  }\n\n  function renderCells(): object[] {\n    let cells = []\n    for(let ind=0; ind<10; ind++) {\n      cells.push(<Cell\n        i={ind}\n        isClear={isClear}\n        gameMode={gameMode}\n        setCell={setCell}\n        shot={shotCell}\n        element={row[ind]}\n      />)\n    }\n    return cells\n  }\n\n  let cells = renderCells()\n  return (\n    <>\n      <div className=\"CellRow\">\n        {/*<button onClick={()=>{console.log(row)}}>check</button>*/}\n        {cells}\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(CellRow);\n","import React from 'react';\n\nimport CellRow from './CellRow'\nimport './Battlefield.css'\n\ntype BattlefieldProps = {\n  isClear: boolean,\n  gameMode: number,\n  field: number[][],\n  shot: (arg0: number, arg1: number)=>any\n}\n\nconst Battlefield: React.FC<BattlefieldProps> = ({ isClear, gameMode, field, shot }) => {\n  // 0 - empty, 1 - miss, 2 - hit (in j)\n  // gameMode: 0 - placing ships, 1 -battle\n\n  function renderRows(): object[] {\n    let rows = []\n    for(let ind=0; ind<10; ind++) {\n      rows.push(<CellRow\n        i={ind}\n        isClear={isClear}\n        gameMode={gameMode}\n        row={field[ind]}\n        shot={shot}\n      />)\n    }\n    return rows\n  }\n\n  let rows = renderRows()\n  return (\n    <div className=\"Battlefield\">\n      {rows}\n    </div>\n  );\n};\n\nexport default Battlefield;\n","const NO_RESPONSE_CODE = 0\n\nexport const SendShips = async (ships: number[][], setID: (arg0: string)=>void) => {\n  const response = await fetch('/ships', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ ships: ships }),\n  });\n\n  if (response.status === NO_RESPONSE_CODE) {\n    // server unavailable\n    setID('Server unavailable')\n  } else if(response.ok) {\n    let resp = await response.json() as {\n      id: string;\n    }\n    setID(resp.id)\n  }\n  console.log('ships: ', ships)\n}\n\n\nexport const SendShot = async (id: string,\n                                x: number,\n                                y: number,\n                                sendResp: (arg0: any)=>any\n                              ) => {\n  let url = '/shot/?id=' + id + '&x=' + x + '&y=' + y\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' }\n  });\n\n  if(response.ok) {\n    let resp = await response.json() as {\n      id: string;\n      type: string;\n    }\n    await sendResp(resp)\n  } else if (response.status === NO_RESPONSE_CODE) {\n    // server unavailable\n  }\n}\n","import { SendShot } from './AppServerAPI'\n\nexport const FieldInit = (): number[][] => {\n  // return array filled with false value\n  let ships = []\n  for(let i=0; i<10; i++) {\n    let ship = []\n    for(let j=0; j<10; j++) {\n      ship.push(0)\n    }\n    ships.push(ship)\n  }\n  return ships\n}\n\nexport const HideOrNot = (a: number): any => {\n  if(a===1) {\n    return { display: 'none' }\n  }\n}\n\nexport const BoolToOnOff = (a: boolean): string => {\n  if(a===true)\n    return 'Enabled'\n  else\n    return 'Disabled'\n}\n\nexport const HitOrMiss = async (id: string,\n                                 x: number,\n                                 y: number,\n                                 changeField: (arg0: number,\n                                               arg1: number,\n                                               arg2: number\n                                               ) => void\n                                 ) => {\n  let type = \"none\"\n  async function returnResponse(response: any) {\n    type = response.type\n  }\n  await SendShot(id, x, y, returnResponse)\n  let value\n  if (type==='miss')\n    value = 1\n  else // if type === 'hit'\n    value = 2\n  changeField(x, y, value)\n}\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport Scoreboard from '../Scoreboard/Scoreboard'\nimport Shipsboard from '../Ships/Shipsboard'\nimport Battlefield from '../Battlefield/Battlefield'\n\nimport {\n  FieldInit, HideOrNot,\n  BoolToOnOff, HitOrMiss\n} from './AppFunctions'\n\nimport { SendShips } from './AppServerAPI'\n\nconst App: React.FC = () => {\n  const [countPlayer1, setCount1] = useState(0)\n  const [countPlayer2, setCount2] = useState(0)\n\n  const [gameMode, setMode] = useState(0)\n  const [field, setField] = useState<number[][]>(FieldInit())\n  const [isClear, setClear] = useState(false)\n  const [ID, setID] = useState(\"0\")\n\n  const [i, setI] = useState(0)\n  const [j, setJ] = useState(0)\n\n  function changeField(x: number, y: number, new_value: number) {\n    let f = field\n    f[x][y] = new_value\n    setField(f)\n    console.log(field)\n  }\n\n  const goBattle = async () => {\n    let sendShips = field\n\n    await SendShips(sendShips, setID)\n\n    setField(FieldInit())\n    setMode(1)\n    setClear(false)\n  }\n\n  const shot = async (x: number, y: number) => {\n    await HitOrMiss(ID, x, y, changeField)\n  }\n\n  function addShip(x: number) {\n    changeField(i, j, x)\n    setI((i+1)%10)\n    setJ((j+1)%10)\n    setCount1(countPlayer1+1)\n  }\n\n  // ¯\\_(ツ)_/¯\n  return (\n    <div className=\"App\">\n      <div className=\"inline-board\">\n        <Scoreboard player1={countPlayer1} player2={countPlayer2}/>\n        <Shipsboard/>\n\n        <button\n            onClick={goBattle}\n            style={HideOrNot(gameMode)}>\n          Go battle</button>\n        <button\n            onClick={()=>setClear(!isClear)}\n            style={HideOrNot(gameMode)}>\n          Fix ships</button>\n        <i style={HideOrNot(gameMode)}>\n          {BoolToOnOff(isClear)}</i>\n\n        <p style={HideOrNot(gameMode)}>\n          You can fix ships if place them wrong</p>\n        <p style={HideOrNot((gameMode+1)%2)} onClick={()=>setMode(0)}>\n          Good game! id={ID}</p>\n\n        <button style={HideOrNot((gameMode+1)%2)} onClick={()=>addShip(1)}>\n          Miss</button>\n        <button style={HideOrNot((gameMode+1)%2)} onClick={()=>addShip(2)}>\n          Hit</button>\n        <button style={HideOrNot((gameMode+1)%2)} onClick={()=>{console.log(field)}}>\n          Print</button>\n      </div>\n\n      <div className=\"inline-field\">\n        <Battlefield\n          key={field.toString()}\n          isClear={isClear}\n          gameMode={gameMode}\n          field={field}\n          shot={shot}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}